# WARNING: Do not deploy this tutorial configuration directly to a production environment
#
# The tutorial docker-compose files have not been written for production deployment and will not 
# scale. A proper architecture has been sacrificed to keep the narrative focused on the learning 
# goals, they are just used to deploy everything onto a single Docker machine. All FIWARE components 
# are running at full debug and extra ports have been exposed to allow for direct calls to services. 
# They also contain various obvious security flaws - passwords in plain text, no load balancing,
# no use of HTTPS and so on. 
# 
# This is all to avoid the need of multiple machines, generating certificates, encrypting secrets
# and so on, purely so that a single docker-compose file can be read as an example to build on, 
# not use directly. 
# 
# When deploying to a production environment, please refer to the Helm Repository
# for FIWARE Components in order to scale up to a proper architecture:
# 
# see: https://github.com/FIWARE/helm-charts/
#
version: "3.8"
services:
  # Orion is an NGSI-v2 context broker
  orion-v2:
    labels:
      org.fiware: 'tutorial'
    image: quay.io/fiware/orion:3.11.0
    # image: telefonicaiot/fiware-orion:issue3884
    hostname: orion
    container_name: fiware-orion
    depends_on:
      - mongo-db
    networks:
      - default
    expose:
      - "1026"
    ports:
      - "1026:1026" # localhost:1026
    command: -dbhost mongo-db -logLevel DEBUG
    healthcheck:
      test: curl --fail -s http://orion:1026/version || exit 1
      interval: 5s

  # Quantum Leap is persisting Short Term History to Crate-DB
  quantumleap:
    image: orchestracities/quantumleap:1.0.0
    labels:
      org.fiware: 'tutorial'
    hostname: quantumleap
    container_name: fiware-quantumleap
    ports:
      - "8668:8668"
    depends_on:
      - crate-db
      - redis-db
    environment:
      - CRATE_HOST=crate-db
      - REDIS_HOST=redis-db
      - REDIS_PORT=6379
      - LOGLEVEL=DEBUG
    healthcheck:
      test: curl --fail -s http://quantumleap:8668/version || exit 1
  
  # IoT-Agent is configured for the UltraLight Protocol
  iot-agent:
      labels:
        org.fiware: 'tutorial'
      image: quay.io/fiware/iotagent-json:latest
      hostname: iot-agent
      container_name: fiware-iot-agent
      depends_on:
        - mongo-db
        - mosquitto
      networks:
        - default
      expose:
        - '4041'
      ports:
        - '4041:4041' # localhost:4041
      environment:
        - IOTA_CB_HOST=orion # name of the context broker to update context
        - IOTA_CB_PORT=1026 # port the context broker listens on to update context
        - IOTA_NORTH_PORT=4041
        - IOTA_REGISTRY_TYPE=mongodb #Whether to hold IoT device info in memory or in a database
        - IOTA_LOG_LEVEL=DEBUG # The log level of the IoT Agent
        - IOTA_TIMESTAMP=true # Supply timestamp information with each measurement
        - IOTA_CB_NGSI_VERSION=v2 # use NGSIv2 when sending updates for active attributes
        - IOTA_AUTOCAST=true # Ensure Ultralight number values are read as numbers not strings
        - IOTA_MONGO_HOST=mongo-db # The host name of MongoDB
        - IOTA_MONGO_PORT=27017 # The port mongoDB is listening on
        - IOTA_MONGO_DB=iotagentjson # The name of the database used in mongoDB
        - IOTA_MQTT_HOST=mosquitto # The host name of the MQTT Broker
        - IOTA_MQTT_PORT=1883 # The port the MQTT Broker is listening on to receive topics
        - IOTA_DEFAULT_RESOURCE= # Default is blank. I'm using MQTT so I don't need a resource
     # - IOTA_HTTP_PORT=7896
        - IOTA_PROVIDER_URL=http://iot-agent:4041
        - IOTA_DEFAULT_TRANSPORT=MQTT

   # Databases
  mongo-db:
    labels:
      org.fiware: 'tutorial'
    image: mongo:6.0
    hostname: mongo-db
    container_name: db-mongo
    expose:
      - "27017"
    ports:
      - "27017:27017" # localhost:27017
    networks:
      - default
    volumes:
      - mongo-db:/data
    healthcheck:
      test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    
  crate-db:
    labels:
      org.fiware: 'tutorial'
    image: crate:4.8.1
    hostname: crate-db
    container_name: db-crate
    ports:
      # Admin UI
      - "4200:4200"
      # Transport protocol
      - "4300:4300"
    command: crate -Cauth.host_based.enabled=false  -Ccluster.name=democluster -Chttp.cors.enabled=true -Chttp.cors.allow-origin="*" -Cdiscovery.type=single-node
    environment:
      - CRATE_HEAP_SIZE=2g # see https://crate.io/docs/crate/howtos/en/latest/deployment/containers/docker.html#troubleshooting
    volumes:
      - crate-db:/data

  redis-db:
    labels:
      org.fiware: 'tutorial'
    image: redis:6
    hostname: redis-db
    container_name: db-redis
    networks:
      - default
    ports:
      - "6379:6379" # localhost:6379
    volumes:
      - redis-db:/data
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 10s

  # Other services
  mosquitto:
    image: eclipse-mosquitto:1.6.14
    hostname: mosquitto
    container_name: mosquitto
    expose:
      - "1883"
   #  - "9001"
    ports:
      - "1883:1883"
    # - "9001:9001"
    volumes:
      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
    networks:
     - default
networks:
  default:
    labels:
      org.fiware: 'tutorial'
    ipam:
      config:
        - subnet: 172.18.1.0/24

volumes:
  mongo-db: ~
  crate-db: ~
  redis-db: ~
